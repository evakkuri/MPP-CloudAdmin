{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageAccountType": {
      "type": "array",
      "defaultValue": [ "Standard_LRS", "Standard_LRS", "Standard_GRS" ]
    },
    "storageAccountNamePrefix": {
      "type": "string",
      "defaultValue": "contoso",
      "minLength": 1
    },
    "vNetPrivateName": {
      "type": "string",
      "defaultValue": "vmPrivate",
      "minlength": 1
    },
    "vNetAzureName": {
      "type": "string",
      "defaultValue": "contoso-vnet-azure",
      "minlength": 1
    },
    "vmPrivateName": {
      "type": "string",
      "defaultValue": "vmPrivate",
      "minLength": 1
    },
    "vmAdminUserName": {
      "type": "string",
      "defaultValue": "vmAdmin",
      "minLength": 1
    },
    "vmAdminPassword": {
      "type": "securestring"
    },
    "vmWindowsOSVersion": {
      "type": "string",
      "defaultValue": "2016-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "2016-Datacenter"
      ]
    },
    "vmPrivatePublicIPDnsName": {
      "type": "string",
      "defaultValue": "contoso-vm",
      "minLength": 1
    },
    "as-vmwebName": {
      "type": "string",
      "defaultValue": "as-vmweb",
      "minLength": 1
    },
    "vmwebIISDSCModule": {
      "type": "string",
      "defaultValue": "https://github.com/Azure/azure-quickstart-templates/raw/master/dsc-extension-iis-server-windows-vm/ContosoWebsite.ps1.zip"
    },
    "vmwebIISDSCFunction": {
      "type": "string",
      "defaultValue": "ContosoWebsite.ps1\\ContosoWebsite"
    },
    "vmwebLoadBalancerName": {
      "type": "string",
      "defaultValue": "contoso-web-lb",
      "minlength": 1
    }
  },
  "variables": {
    "vNetPrivatePrefix": "172.16.0.0/16",
    "vNetPrivateSubnet1Name": "private-subnet-1",
    "vNetPrivateSubnet1Prefix": "172.16.1.0/24",
    "vNetPrivateSubnet2Name": "private-subnet-2",
    "vNetPrivateSubnet2Prefix": "172.16.2.0/24",
    "vNetAzurePrefix": "10.0.0.0/16",
    "vNetAzureSubnet1Name": "azure-subnet-1",
    "vNetAzureSubnet1Prefix": "10.0.1.0/24",
    "vNetAzureSubnet2Name": "azure-subnet-2",
    "vNetAzureSubnet2Prefix": "10.0.2.0/24",
    "vNet1tovNet2PeeringName": "[concat(parameters('vNetPrivateName'), '-', parameters('vNetAzureName'))]",
    "vNet2tovNet1PeeringName": "[concat(parameters('vNetAzureName'), '-', parameters('vNetPrivateName'))]",
    "vmImagePublisher": "MicrosoftWindowsServer",
    "vmImageOffer": "WindowsServer",
    "vmPrivateOSDiskName": "vmPrivateOSDisk",
    "vmSize": "Standard_D2_v2",
    "vmPrivateVnetID": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetPrivateName'))]",
    "vmPrivateSubnetRef": "[concat(variables('vmPrivateVnetID'), '/subnets/', variables('vNetPrivateSubnet1Name' ))]",
    "vmStorageAccountContainerName": "vhds",
    "vmPrivateNicName": "[concat(parameters('vmPrivateName'), '-', 'nic-0')]",
    "vmPrivatePublicIPName": "vmPrivatePublicIP",
    "vmwebOSDiskName": "vmwebOSDisk",
    "vmwebVnetID": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetAzureName'))]",
    "vmwebSubnetRef": "[concat(variables('vmwebVnetID'), '/subnets/', variables('vNetAzureSubnet1Name'))]"
  },
  "resources": [
    {
      "name": "[concat(parameters('storageAccountNamePrefix'),copyIndex(),uniqueString(resourceGroup().id))]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-01-01",
      "copy": {
        "count": "[length(parameters('storageAccountType'))]",
        "name": "storageCopy"
      },
      "sku": {
        "name": "[parameters('storageAccountType')[copyIndex()]]"
      },
      "dependsOn": [],
      "tags": {
        "displayName": "[concat(parameters('storageAccountNamePrefix'),copyIndex(),uniqueString(resourceGroup().id))]"
      },
      "kind": "Storage"
    },
    {
      "name": "[parameters('vNetPrivateName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "dependsOn": [],
      "tags": {
        "displayName": "[parameters('vNetPrivateName')]"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetPrivatePrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('vNetPrivateSubnet1Name' )]",
            "properties": {
              "addressPrefix": "[variables('vNetPrivateSubnet1Prefix')]"
            }
          },
          {
            "name": "[variables('vNetPrivateSubnet2Name')]",
            "properties": {
              "addressPrefix": "[variables('vNetPrivateSubnet2Prefix')]"
            }
          }
        ]
      },
      "resources": [
        {
          "name": "[variables('vNet1tovNet2PeeringName')]",
          "type": "virtualNetworkPeerings",
          "apiVersion": "2017-03-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Network/virtualNetworks/', parameters('vNetPrivateName'))]",
            "[concat('Microsoft.Network/virtualNetworks/', parameters('vNetAzureName'))]"
          ],
          "comments": "This is the peering from the private vNet to the azure vNet",
          "properties": {
            "allowVirtualNetworkAccess": "true",
            "allowForwardedTraffic": "false",
            "allowGatewayTransit": "false",
            "useRemoteGateways": "false",
            "remoteVirtualNetwork": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks',parameters('vNetAzureName'))]"
            }
          }
        }
      ]
    },
    {
      "name": "[parameters('vNetAzureName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "dependsOn": [],
      "tags": {
        "displayName": "[parameters('vNetAzureName')]"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vNetAzurePrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('vNetAzureSubnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('vNetAzureSubnet1Prefix')]"
            }
          },
          {
            "name": "[variables('vNetAzureSubnet2Name')]",
            "properties": {
              "addressPrefix": "[variables('vNetAzureSubnet2Prefix')]"
            }
          }
        ]
      },
      "resources": [
        {
          "name": "[variables('vNet2tovNet1PeeringName')]",
          "type": "virtualNetworkPeerings",
          "apiVersion": "2017-03-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Network/virtualNetworks/', parameters('vNetPrivateName'))]",
            "[concat('Microsoft.Network/virtualNetworks/', parameters('vNetAzureName'))]"
          ],
          "comments": "This is the peering from the azure vNet to the private vNet",
          "properties": {
            "allowVirtualNetworkAccess": "true",
            "allowForwardedTraffic": "false",
            "allowGatewayTransit": "false",
            "useRemoteGateways": "false",
            "remoteVirtualNetwork": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks',parameters('vNetPrivateName'))]"
            }
          }
        }
      ]
    },
    {
      "name": "[variables('vmPrivateNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetPrivateName'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('vmPrivatePublicIPName'))]"
      ],
      "tags": {
        "displayName": "[variables('vmPrivateNicName')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('vmPrivateSubnetRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('vmPrivatePublicIPName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[parameters('vmPrivateName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "['storageCopy']",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('vmPrivateNicName'))]"
      ],
      "tags": {
        "displayName": "vmPrivate"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmPrivateName')]",
          "adminUsername": "[parameters('vmAdminUserName')]",
          "adminPassword": "[parameters('vmAdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmImagePublisher')]",
            "offer": "[variables('vmImageOffer')]",
            "sku": "[parameters('vmWindowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "vmPrivateOSDisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', concat(parameters('storageAccountNamePrefix'),0,uniqueString(resourceGroup().id))), '2016-01-01').primaryEndpoints.blob, variables('vmStorageAccountContainerName'), '/', variables('vmPrivateOSDiskName'), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vmPrivateNicName'))]"
            }
          ]
        }
      }
    },
    {
      "name": "[variables('vmPrivatePublicIPName')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "dependsOn": [],
      "tags": {
        "displayName": "vmPrivatePublicIP"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('vmPrivatePublicIPDnsName'),'-',uniqueString(resourceGroup().id))]"
        }
      }
    },
    {
      "name": "[concat('vmweb','-',copyIndex(),'-nic-0')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "copy": {
        "count": 2,
        "name": "vmwebNicCopy"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetAzureName'))]",
        "[concat('Microsoft.Network/loadBalancers/', parameters('vmwebLoadBalancerName'))]"
      ],
      "tags": {
        "displayName": "[concat('vmweb','-',copyIndex(),'-nic-0')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('vmwebSubnetRef')]"
              }
            }
          }
        ],
        "loadBalancerBackendAddressPools": [
          {
            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',parameters('vmwebLoadBalancerName')),'/backendAddressPools/BackendPool1')]"
          }
        ]
      }
    },
    {
      "name": "[concat('vmweb','-',copyIndex())]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "copy": {
        "count": 2,
        "name": "vmwebCopy"
      },
      "dependsOn": [
        "storageCopy",
        "vmwebNicCopy",
        "[concat('Microsoft.Compute/availabilitySets/','as-vmweb')]"
      ],
      "tags": {
        "displayName": "[concat('vmweb','-',copyIndex())]"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets/','as-vmweb')]"
        },
        "osProfile": {
          "computerName": "[concat('vmweb','-',copyIndex())]",
          "adminUsername": "[parameters('vmAdminUsername')]",
          "adminPassword": "[parameters('vmAdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('vmImagePublisher')]",
            "offer": "[variables('vmImageOffer')]",
            "sku": "[parameters('vmWindowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat('vmweb','-',copyIndex(),'-','osDisk')]",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', concat(parameters('storageAccountNamePrefix'),copyIndex(),uniqueString(resourceGroup().id))), '2016-01-01').primaryEndpoints.blob, variables('vmStorageAccountContainerName'), '/', 'vmweb','-',copyIndex(),'-','osDisk', '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('vmweb','-',copyIndex(),'-nic-0'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "name": "IIS",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2016-03-30",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', concat('vmweb','-',copyIndex()))]"
          ],
          "tags": {
            "displayName": "IIS"
          },
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.9",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "modulesUrl": "[parameters('vmwebIISDSCModule')]",
              "configurationFunction": "[parameters('vmwebIISDSCFunction')]",
              "Properties": {
                "MachineName": "[concat('vmweb','-',copyIndex())]"
              }
            },
            "protectedSettings": {
            }
          }
        }
      ]
    },
    {
      "name": "[parameters('as-vmwebName')]",
      "type": "Microsoft.Compute/availabilitySets",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "[parameters('as-vmwebName')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      }
    },
    {
      "name": "[parameters('vmwebLoadBalancerName')]",
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[parameters('vNetAzureName')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "properties": {
              "subnet": {
                "id": "[variables('vmwebSubnetRef')]"
              },
              "privateIPAddress": "10.0.1.20",
              "privateIPAllocationMethod": "Static"
            },
            "name": "LoadBalancerFrontend"
          }
        ],
        "backendAddressPools": [
          {
            "name": "BackendPool1"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers',parameters('vmwebLoadBalancerName')),'/frontendIpConfigurations/LoadBalancerFrontEnd')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers',parameters('vmwebLoadBalancerName')),'/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers',parameters('vmwebLoadBalancerName')),'/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "idleTimeoutInMinutes": 15
            },
            "name": "lbRule"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 15,
              "numberofProbes": 2
            },
            "name": "lbprobe"
          }
        ]
      }
    }
  ],
    "outputs": {

    }
}
